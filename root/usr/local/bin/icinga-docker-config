#!/bin/bash

set -eu

: "${ICINGA_NODENAME:=$(hostname -f)}"
: "${ICINGA_CA_ENABLE:=false}"
: "${ICINGA_CA_TICKET_SALT:=}"
: "${ICINGA_FEATURE_API:=${ICINGA_CA_ENABLE}}"
: "${ICINGA_ENABLE_CHECKS:=true}"
: "${ICINGA_CONCURRENT_CHECKS:=512}"
: "${ICINGA_IDO_ENABLE:=false}"
: "${ICINGA_IDO_HOST:=localhost}"
: "${ICINGA_IDO_NAME:=icinga2}"
: "${ICINGA_IDO_USERNAME:=icinga2}"
: "${ICINGA_IDO_PASSWORD:=icinga2}"
: "${ICINGA_IDO_PORT:=3306}"
: "${ICINGA_IDO_INSTALL:=false}"
: "${ICINGA_DB_ENABLE:=false}"
: "${ICINGA_DB_HOST:=redis}"
: "${ICINGA_DB_PORT:=6379}" # Note: This is the standard redis port - Icinga would use 8380 by default
: "${ICINGA_DB_PASSWORD:=}"

icinga_data=/var/lib/icinga2
icinga_config=/etc/icinga2
schema_mysql=/usr/share/icinga2-ido-mysql/schema/mysql.sql

set_const() {
  local name="$1"
  local val="$2"

  local file="${icinga_config}/constants.conf"

  local line="const ${name} = \"${val}\""
  if grep -qP "^(//\\s*)?const\\s+${name}\\s+" "${file}"; then
    if ! grep -qP "^(//\\s*)?const\\s+${name}\\s+=\\s+\"${val}\"\\s*" "${file}"; then
      echo "Setting constant ${name} in ${file}"
      sed -ir "s~^\\(//\\s*\\)\\?const\\s\\+${name}\\s\\+=.*~const ${name} = \"${val}\"~" "${file}"
    fi
  else
    echo "Adding constant ${name} to ${file}"
    echo "${line}" >>"${file}"
  fi
}

parse_constants() {
  local pattern="ICINGA_CONSTANT_"
  local line const value

  while read -r line; do
    line="${line#${pattern}}"
    const="${line%=*}"
    value="${line#*=}"

    set_const "${const}" "${value}"
  done < <(set | grep "^${pattern}")
}

parse_api_users() {
  local pattern="ICINGA_API_USER_"
  local line user pass

  while read -r line; do
    line="${line#${pattern}}"
    user="${line%=*}"
    pass="${line#*=}"

    create_api_user "${user}" "${pass}"
  done < <(set | grep "^${pattern}")
}

create_api_user() {
  local user="$1"
  local password="$2"
  local path="${icinga_config}/conf.d/api-users"
  local file="${path}/${user}.conf"

  [ -d "${path}" ] || mkdir "${path}"

  content="
# Managed by icinga-docker-config

object ApiUser \"${user}\" {
  password = \"${password}\"
  permissions = [ \"*\" ]
}
"
  # TODO
  #if [ -f "${file}"]; then
  #fi

  echo "Configuring API user ${user}"
  echo "${content}" >"${file}"
}

update_application_config() {
  local file="${icinga_config}/conf.d/app.conf"

  content="
# Managed by icinga-docker-config

object IcingaApplication \"app\" {
  enable_host_checks = ${ICINGA_ENABLE_CHECKS}
  enable_service_checks = ${ICINGA_ENABLE_CHECKS}
}
"

  echo "Configuring config file ${file}"
  echo "${content}" >"${file}"
}

update_icingadb_config() {
  local file="${icinga_config}/features-available/icingadb.conf"

  content="
# Managed by icinga-docker-config

object IcingaDB \"icingadb\" {
  host = \"${ICINGA_DB_HOST}\"
  port = ${ICINGA_DB_PORT}
  //password = \"${ICINGA_DB_PASSWORD}\"
}
"

  echo "Configuring config file ${file}"
  echo "${content}" >"${file}"
}

update_ido_config() {
  local file="${icinga_config}/features-available/ido-mysql.conf"

  content="
# Managed by icinga-docker-config

library \"db_ido_mysql\"

object IdoMysqlConnection \"ido-mysql\" {
  host     = \"${ICINGA_IDO_HOST}\",
  database = \"${ICINGA_IDO_NAME}\"
  user     = \"${ICINGA_IDO_USERNAME}\",
  password = \"${ICINGA_IDO_PASSWORD}\",
  port     = \"${ICINGA_IDO_PORT}\",
}
"

  echo "Configuring config file ${file}"
  echo "${content}" >"${file}"
}

mysql() {
  MYSQL_PWD="${ICINGA_IDO_PASSWORD}" command mysql \
    -h "${ICINGA_IDO_HOST}" -P "${ICINGA_IDO_PORT}" \
    -u "${ICINGA_IDO_USERNAME}"\
    "${ICINGA_IDO_NAME}" "$@"
}

test_mysql_connection() {
  echo "Checking IDO Database connection"
  wait-for-tcp "${ICINGA_IDO_HOST}" "${ICINGA_IDO_PORT}"
  if ! mysql -e "SELECT 1" >/dev/null; then
    echo "Could not connect to database" >&2
    exit 1
  fi
}

check_ido_schema() {
  if ! mysql -e "SHOW TABLES LIKE 'icinga_dbversion';" | grep -q icinga_dbversion; then
    echo "Installing IDO schema"
    mysql < "${schema_mysql}"
  fi
}

set_const NodeName "${ICINGA_NODENAME}"
set_const MaxConcurrentChecks "${ICINGA_CONCURRENT_CHECKS}"

parse_constants

if [ "${ICINGA_CA_ENABLE}" = true ]; then
  if [ ! -d "${icinga_data}/ca" ]; then
    echo "Creating new CA"
    icinga2 pki new-ca
  fi

  ca="${icinga_data}/certs/ca.crt"
  crt="${icinga_data}/certs/${ICINGA_NODENAME}.crt"
  csr="${icinga_data}/certs/${ICINGA_NODENAME}.csr"
  key="${icinga_data}/certs/${ICINGA_NODENAME}.key"

  if [ ! -f "${ca}" ]; then
    cp -v "${icinga_data}/ca/ca.crt" "${ca}"
  fi

  if [ ! -f "${crt}" ]; then
    icinga2 pki new-cert --cn "${ICINGA_NODENAME}" --key "${key}" --csr "${csr}"
    icinga2 pki sign-csr --csr "${csr}" --cert "${crt}"
  fi

  set_const TicketSalt "${ICINGA_CA_TICKET_SALT}"
else
  set_const TicketSalt ""
fi

if [ "${ICINGA_FEATURE_API}" = true ]; then
  icinga2 feature enable api
else
  icinga2 feature disable api
fi

parse_api_users
update_application_config

if [ "${ICINGA_DB_ENABLE}" = true ]; then
  update_icingadb_config
  icinga2 feature enable icingadb
else
  icinga2 feature disable icingadb
fi

if [ "${ICINGA_IDO_ENABLE}" = true ]; then
  update_ido_config
  test_mysql_connection
  if [ "${ICINGA_IDO_INSTALL}" = true ]; then
    check_ido_schema
  fi
  icinga2 feature enable ido-mysql
else
  icinga2 feature disable ido-mysql
fi

# vi: ts=2 sw=2 expandtab :
